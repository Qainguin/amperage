// hey this code seemed really goofy to me, so I changed it,
// see https://github.com/LemLib/v5-serial-protocol/blob/ef8df5019a5504b5b96fc887ef1587d9ecaa84ea/src/VexIniConfig.ts
// for unchanged code
// -@meisZWFLZ

import { type ZerobaseSlotNumber } from "./Vex";
class BaseIniBuilder {
  protected str = "";
  protected addLine(line: string): void {
    this.str += line + "\n";
  }

  public addComment(comment: string): this {
    this.addLine("; " + comment);
    return this;
  }

  public getContent(): string {
    return this.str;
  }
}

class IniSectionBuilder<
  O extends Record<number | string, string | number>,
> extends BaseIniBuilder {
  constructor(
    public readonly name: string,
    private readonly object: O,
    private readonly keyTransform: (k: keyof O) => string = (k) => k.toString(),
  ) {
    super();
  }

  private addSingleObjProperty(key: keyof O, maxValueLength?: number): void {
    // if property is empty or nullish, skip it
    if (this.object[key] == null || this.object[key].toString().length === 0)
      return;

    const formattedKey = this.keyTransform(key).padEnd(12).slice(0, 12);
    const trimmedVal = this.object[key].toString().slice(0, maxValueLength);

    this.addLine(`${formattedKey} = "${trimmedVal}"`);
  }

  public addObjProperty(
    key: keyof O | Array<keyof O>,
    maxValueLength?: number,
  ): this {
    const keys = Array.isArray(key) ? key : [key];
    for (const k of keys) {
      this.addSingleObjProperty(k, maxValueLength);
    }
    return this;
  }

  public addAllObjProps(maxValueLength?: number): this {
    const keys = Object.keys(this.object);
    for (const k of keys) {
      this.addSingleObjProperty(k, maxValueLength);
    }
    return this;
  }
}
class IniFileBuilder extends BaseIniBuilder {
  public addSection(
    section: IniSectionBuilder<Record<number | string, string | number>>,
  ): this {
    this.addLine(`[${section.name}]`);
    this.str += section.getContent();

    return this;
  }
}

export class ProgramIniConfig {
  baseName = "slot_1";
  autorun = false;
  project = { version: "1", ide: "Unknown", file: "none" };
  program = {
    version: "1",
    name: "program",
    slot: 0 as ZerobaseSlotNumber,
    icon: "default.bmp",
    iconalt: "",
    description: "",
    date: "",
    timezone: "0",
  };

  config: Record<number, string> = {}; // { port_22: "..." }
  controller1: Record<string, string> = {};
  controller2: Record<string, string> = {};
  // private options: { [key: string]: string } = {};

  constructor() {
    this.config = {
      22: "adi",
    };
  }

  setProgramDate(date: Date): void {
    const d = date;
    this.program.date = d.toISOString();
    const tzo = Math.abs(d.getTimezoneOffset());
    const tzh = (tzo / 60) >>> 0;
    const tzm = tzo - tzh * 60;
    this.program.timezone =
      (d.getTimezoneOffset() > 0 ? "-" : "+") +
      this.dec2(tzh) +
      ":" +
      this.dec2(tzm);
  }

  createIni(): string {
    if (this.program.date.length === 0) {
      this.setProgramDate(new Date());
    }
    return new IniFileBuilder()
      .addComment("")
      .addComment("VEX program ini file")
      .addComment("Generated by Vex V5 Serial Protocol Library")
      .addComment("")
      .addSection(
        new IniSectionBuilder("project", this.project).addObjProperty(
          "ide",
          16,
        ),
      )
      .addComment("")
      .addSection(
        new IniSectionBuilder("program", this.program)
          .addObjProperty("name", 32)
          .addObjProperty("description", 256)
          .addObjProperty("icon", 16)
          .addObjProperty("iconalt", 16)
          .addObjProperty("slot", 16),
      )
      .addComment("")
      .addSection(
        new IniSectionBuilder(
          "config",
          this.config,
          (k) => "port_" + this.dec2(k),
        ).addAllObjProps(),
      )
      .addComment("")
      .addSection(
        new IniSectionBuilder(
          "controller_1",
          this.controller1,
        ).addAllObjProps(),
      )
      .addComment("")
      .addSection(
        new IniSectionBuilder(
          "controller_2",
          this.controller2,
        ).addAllObjProps(),
      )
      .getContent();
  }

  dec2(value: number): string {
    const str = ("00" + value.toString(10)).substr(-2, 2);
    return str.toUpperCase();
  }
}
